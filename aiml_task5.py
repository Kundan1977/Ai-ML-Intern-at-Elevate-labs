# -*- coding: utf-8 -*-
"""AiML_task5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qAtz2xk6KEx69D8Fr5xFQtj5h47Ax8UX
"""

# Importing Libraries

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data with top 5 printing

data = pd.read_csv('heart.csv')
print(data.head())

# Preprocessing

X = data.drop('target', axis=1)
Y = data['target']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=30)

# Train Decision Tree

dt = DecisionTreeClassifier(max_depth=4, random_state=30
                            )
dt.fit(X_train, Y_train)

Y_pred_dt = dt.predict(X_test)
print("Decision Tree Accuracy:", accuracy_score(Y_test, Y_pred_dt))

# Visualize the tree

plt.figure(figsize=(15,10))
plot_tree(dt, feature_names=X.columns, class_names=['No Disease','Disease'], filled=True)
plt.show()

# Train RandomForest

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, Y_train)

Y_pred_rf = rf.predict(X_test)
print("Random Forest Accuracy:", accuracy_score(Y_test, Y_pred_rf))

# Compare Accuracy

# Training predictions
train_pred_dt = dt.predict(X_train)
test_pred_dt  = dt.predict(X_test)

print("Decision Tree:")
print("  Train Accuracy:", accuracy_score(Y_train, train_pred_dt)*100)
print("  Test  Accuracy:", accuracy_score(Y_test,  test_pred_dt)*100)

train_pred_rf = rf.predict(X_train)
test_pred_rf  = rf.predict(X_test)

print("\nRandom Forest:")
print("  Train Accuracy:", accuracy_score(Y_train, train_pred_rf)*100)
print("  Test  Accuracy:", accuracy_score(Y_test,  test_pred_rf)*100)

# Feature Importance

feat_importance = pd.Series(rf.feature_importances_, index=X.columns)
feat_importance.sort_values().plot(kind='barh', figsize=(8,5), color='red')
plt.title('Feature Importance')
plt.show()

# Cross Validation

cv_scores = cross_val_score(rf, X, Y, cv=5)
print("Cross-Validation Accuracy:", cv_scores.mean())