# -*- coding: utf-8 -*-
"""AiML_Task7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ldlzF4Pgakc_vqSGrbZaxAWEcaqL-iOv
"""

# Import Libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn import datasets
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler

# Load the Data

data = load_breast_cancer()
X, y = data.data, data.target

# Scale features

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

# Train svm with linear kernel

linear_svm = SVC(kernel='linear', C=1)
linear_svm.fit(X_train, y_train)

print("Linear SVM Accuracy:", linear_svm.score(X_test, y_test))

# Train svm with RBF kernel

rbf_svm = SVC(kernel='rbf', C=1, gamma='scale')
rbf_svm.fit(X_train, y_train)

print("RBF SVM Accuracy:", rbf_svm.score(X_test, y_test))

# HyperParameter Tuning(Grid Search)

param_grid = {
    'C': [0.1, 1, 10],
    'gamma': ['scale', 0.1, 0.01],
    'kernel': ['rbf']
}
grid = GridSearchCV(SVC(), param_grid, cv=5, scoring='accuracy')
grid.fit(X_train, y_train)

print("Best Parameters:", grid.best_params_)
print("Best CV Score:", grid.best_score_)

# Cross Validation

cv_scores = cross_val_score(rbf_svm, X_scaled, y, cv=5)
print("Cross-validation Scores:", cv_scores)
print("Mean CV Accuracy:", np.mean(cv_scores))

# Visualization (2D Decision Boundary)
# Reduce to 2D


pca = PCA(n_components=2)
X_reduced = pca.fit_transform(X_scaled)

# Train SVM with best params
svm_vis = SVC(kernel='rbf', C=grid.best_params_['C'], gamma=grid.best_params_['gamma'])
svm_vis.fit(X_reduced, y)

# Create mesh
x_min, x_max = X_reduced[:, 0].min() - 1, X_reduced[:, 0].max() + 1
y_min, y_max = X_reduced[:, 1].min() - 1, X_reduced[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02),
                     np.arange(y_min, y_max, 0.02))

Z = svm_vis.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

# Plot
plt.contourf(xx, yy, Z, alpha=0.6, cmap=plt.cm.coolwarm)
plt.scatter(X_reduced[:, 0], X_reduced[:, 1], c=y, edgecolors='k', cmap=plt.cm.coolwarm)
plt.title("SVM Decision Boundary (RBF Kernel)")
plt.show()