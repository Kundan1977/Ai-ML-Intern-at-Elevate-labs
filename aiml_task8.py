# -*- coding: utf-8 -*-
"""AiML_Task8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LpH1KpxUkCMBvLCwTKDn45CsFn3Y3UnR
"""

# Import Libraries

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.metrics import silhouette_score

df = pd.read_csv('/content/Mall_Customers.csv')
df.head()

# Select features for clustering
X = df[['Annual Income (k$)', 'Spending Score (1-100)']].values

# Scale features (important for KMeans)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Apply K-Means

kmeans = KMeans(n_clusters=5, init='k-means++', n_init=10, random_state=42)
labels = kmeans.fit_predict(X_scaled)

print("Cluster Centers (scaled):\n", kmeans.cluster_centers_)
print("Inertia (sum of squared distances):", kmeans.inertia_)

# Elbow Method

inertias = []
for k in range(1, 11):
    km = KMeans(n_clusters=k, init='k-means++', n_init=10, random_state=42)
    km.fit(X_scaled)
    inertias.append(km.inertia_)

plt.plot(range(1, 11), inertias, marker='o')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal k')
plt.show()

#Evaluate with Silhouette Score

from sklearn.metrics import silhouette_score

sil_score = silhouette_score(X_scaled, labels)
print("Silhouette Score:", sil_score)

# Visualize Clusters

plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=labels, cmap='rainbow', edgecolor='k')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],
            s=200, c='black', marker='X')
plt.xlabel("Annual Income (scaled)")
plt.ylabel("Spending Score (scaled)")
plt.title("Customer Segmentation using K-Means")
plt.show()

